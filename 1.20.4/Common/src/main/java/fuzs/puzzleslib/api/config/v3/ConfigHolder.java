package fuzs.puzzleslib.api.config.v3;

import fuzs.puzzleslib.api.core.v1.Buildable;
import fuzs.puzzleslib.impl.config.ConfigHolderRegistry;
import fuzs.puzzleslib.impl.core.CommonFactories;
import fuzs.puzzleslib.impl.core.ModContext;

import java.nio.file.Paths;
import java.util.function.UnaryOperator;

/**
 * a config holder for holding mod configs
 * there are three different kinds depending on where the data shall be used: CLIENT, COMMON, SERVER
 * this implementation is not limited to three held configs though, as many configs as desired may be added (file names must be different!)
 * instead of retrieving configs via mod config type they are stored by class type
 */
public interface ConfigHolder {

    /**
     * Creates a new builder for registering configs to this holder instance.
     *
     * @param modId id for registration and config name
     * @return new builder instance
     */
    static Builder builder(String modId) {
        return ModContext.get(modId).getConfigHolder$Builder();
    }

    /**
     * @param clazz config clazz type
     * @param <T>   config type
     * @return      the config holder
     */
    <T extends ConfigCore> ConfigDataHolder<T> getHolder(Class<T> clazz);

    /**
     * @param clazz config clazz type
     * @param <T>   config type
     * @return      the actual config
     */
    default <T extends ConfigCore> T get(Class<T> clazz) {
        return this.getHolder(clazz).getConfig();
    }

    /**
     * @param modId mod id this config belongs to
     * @return config name
     */
    static String simpleName(String modId) {
        return String.format("%s.toml", modId);
    }

    /**
     * @param modId mod id this config belongs to
     * @param type type of config
     * @return config name as when generated by Forge
     */
    static String defaultName(String modId, String type) {
        return String.format("%s-%s.toml", modId, type);
    }

    /**
     * @param configDir dir to move config to
     * @param fileName config file name
     * @return path to config in dir
     */
    static String moveToDir(String configDir, String fileName) {
        return Paths.get(configDir, fileName).toString();
    }

    /**
     * builder interface for registering configs, not needed anymore after initial registration is complete,
     * but no new instance is created, so we only store the super type {@link ConfigHolder}
     */
    interface Builder extends ConfigHolderRegistry, Buildable {

        /**
         * register a new client config to the holder/builder
         *
         * @param <T>   client config type
         * @param clazz client config main class
         * @return the builder we are working with
         */
        <T extends ConfigCore> Builder client(Class<T> clazz);

        /**
         * register a new client config to the holder/builder
         *
         * @param <T>   common config type
         * @param clazz common config main class
         * @return the builder we are working with
         */
        <T extends ConfigCore> Builder common(Class<T> clazz);

        /**
         * register a new client config to the holder/builder
         *
         * @param <T>   server config type
         * @param clazz server config main class
         * @return the builder we are working with
         */
        <T extends ConfigCore> Builder server(Class<T> clazz);

        /**
         * this sets the file name on {@link ConfigDataHolder}, it's only used for storing,
         * since actually it's only ever need in this class when calling {@link #build}
         *
         * by default this is set to {@link #defaultName}, otherwise {@link #simpleName} and {@link #moveToDir} exist for convenience
         *
         * @param clazz     config main class
         * @param fileName  file name operator, passed in is the modId
         * @param <T>       config type
         * @return          the builder we are working with
         */
        <T extends ConfigCore> Builder setFileName(Class<T> clazz, UnaryOperator<String> fileName);
    }
}
